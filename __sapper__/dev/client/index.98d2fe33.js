import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, e as element, t as text, b as space, c as claim_element, f as children, g as claim_text, h as detach_dev, j as claim_space, k as add_location, l as attr_dev, m as insert_dev, n as append_dev, o as set_data_dev, q as query_selector_all, p as noop, r as destroy_each } from './client.6a682fa7.js';

/* src/routes/index.svelte generated by Svelte v3.38.2 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (81:3) {#each projects as project}
function create_each_block_1(ctx) {
	let a;
	let div0;
	let p0;
	let t0_value = /*project*/ ctx[9].title + "";
	let t0;
	let t1;
	let div1;
	let p1;
	let t2_value = /*project*/ ctx[9].role + "";
	let t2;
	let t3;
	let div2;
	let p2;
	let t4_value = /*project*/ ctx[9].year + "";
	let t4;
	let t5;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			div0 = element("div");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			p2 = element("p");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(a_nodes);
			div2 = claim_element(a_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", {});
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, t4_value);
			p2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 83, 6, 2949);
			attr_dev(div0, "class", "w-4/12 px-4");
			add_location(div0, file, 82, 5, 2917);
			add_location(p1, file, 86, 6, 3037);
			attr_dev(div1, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div1, file, 85, 5, 2989);
			add_location(p2, file, 89, 6, 3135);
			attr_dev(div2, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div2, file, 88, 5, 3076);
			attr_dev(a, "class", "flex block ml-auto text-gray-600 dark:text-gray-400 hover:underline hover:text-black dark:hover:text-white");
			attr_dev(a, "href", a_href_value = /*project*/ ctx[9].url);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file, 81, 4, 2730);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(a, t1);
			append_dev(a, div1);
			append_dev(div1, p1);
			append_dev(p1, t2);
			append_dev(a, t3);
			append_dev(a, div2);
			append_dev(div2, p2);
			append_dev(p2, t4);
			append_dev(a, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projects*/ 1 && t0_value !== (t0_value = /*project*/ ctx[9].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*projects*/ 1 && t2_value !== (t2_value = /*project*/ ctx[9].role + "")) set_data_dev(t2, t2_value);
			if (dirty & /*projects*/ 1 && t4_value !== (t4_value = /*project*/ ctx[9].year + "")) set_data_dev(t4, t4_value);

			if (dirty & /*projects*/ 1 && a_href_value !== (a_href_value = /*project*/ ctx[9].url)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(81:3) {#each projects as project}",
		ctx
	});

	return block;
}

// (111:3) {#each experiences as experience}
function create_each_block(ctx) {
	let a;
	let div0;
	let p0;
	let t0_value = /*experience*/ ctx[6].title + "";
	let t0;
	let t1;
	let div1;
	let p1;
	let t2_value = /*experience*/ ctx[6].role + "";
	let t2;
	let t3;
	let div2;
	let p2;
	let t4_value = /*experience*/ ctx[6].date + "";
	let t4;
	let t5;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			div0 = element("div");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			p2 = element("p");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(a_nodes);
			div2 = claim_element(a_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", {});
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, t4_value);
			p2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 113, 6, 3857);
			attr_dev(div0, "class", "w-4/12 px-4");
			add_location(div0, file, 112, 5, 3825);
			add_location(p1, file, 116, 6, 3948);
			attr_dev(div1, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div1, file, 115, 5, 3900);
			add_location(p2, file, 119, 6, 4049);
			attr_dev(div2, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div2, file, 118, 5, 3990);
			attr_dev(a, "class", "flex block ml-auto text-gray-600 dark:text-gray-400 hover:underline hover:text-black dark:hover:text-white");
			attr_dev(a, "href", a_href_value = /*experience*/ ctx[6].url);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file, 111, 4, 3635);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(a, t1);
			append_dev(a, div1);
			append_dev(div1, p1);
			append_dev(p1, t2);
			append_dev(a, t3);
			append_dev(a, div2);
			append_dev(div2, p2);
			append_dev(p2, t4);
			append_dev(a, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*experiences*/ 2 && t0_value !== (t0_value = /*experience*/ ctx[6].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*experiences*/ 2 && t2_value !== (t2_value = /*experience*/ ctx[6].role + "")) set_data_dev(t2, t2_value);
			if (dirty & /*experiences*/ 2 && t4_value !== (t4_value = /*experience*/ ctx[6].date + "")) set_data_dev(t4, t4_value);

			if (dirty & /*experiences*/ 2 && a_href_value !== (a_href_value = /*experience*/ ctx[6].url)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(111:3) {#each experiences as experience}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div18;
	let header0;
	let div1;
	let a;
	let t1;
	let t2;
	let div0;
	let t3;
	let div5;
	let div2;
	let p0;
	let t4;
	let t5;
	let div3;
	let p1;
	let t6;
	let t7;
	let div4;
	let p2;
	let t8;
	let t9;
	let section0;
	let div6;
	let t10;
	let div7;
	let t11;
	let header1;
	let div11;
	let div8;
	let p3;
	let t12;
	let t13;
	let div9;
	let p4;
	let t14;
	let t15;
	let div10;
	let p5;
	let t16;
	let t17;
	let section1;
	let div12;
	let t18;
	let div17;
	let div13;
	let p6;
	let t19;
	let t20;
	let t21;
	let t22;
	let div16;
	let div14;
	let p7;
	let t23;
	let t24;
	let div15;
	let p8;
	let t25;
	let t26;
	let each_value_1 = /*projects*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*experiences*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div18 = element("div");
			header0 = element("header");
			div1 = element("div");
			a = element("a");
			t1 = text("Maxim Siebert");
			t2 = space();
			div0 = element("div");
			t3 = space();
			div5 = element("div");
			div2 = element("div");
			p0 = element("p");
			t4 = text("Project");
			t5 = space();
			div3 = element("div");
			p1 = element("p");
			t6 = text("Role");
			t7 = space();
			div4 = element("div");
			p2 = element("p");
			t8 = text("Year");
			t9 = space();
			section0 = element("section");
			div6 = element("div");
			t10 = space();
			div7 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t11 = space();
			header1 = element("header");
			div11 = element("div");
			div8 = element("div");
			p3 = element("p");
			t12 = text("Experience");
			t13 = space();
			div9 = element("div");
			p4 = element("p");
			t14 = text("Title");
			t15 = space();
			div10 = element("div");
			p5 = element("p");
			t16 = text("Year");
			t17 = space();
			section1 = element("section");
			div12 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t18 = space();
			div17 = element("div");
			div13 = element("div");
			p6 = element("p");
			t19 = text("Ottawa – ");
			t20 = text(/*time*/ ctx[2]);
			t21 = text(" ET");
			t22 = space();
			div16 = element("div");
			div14 = element("div");
			p7 = element("p");
			t23 = text("Updated 05/2021");
			t24 = space();
			div15 = element("div");
			p8 = element("p");
			t25 = text("© 2011 – ");
			t26 = text(/*year*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oh6yg0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div18 = claim_element(nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			header0 = claim_element(div18_nodes, "HEADER", { class: true });
			var header0_nodes = children(header0);
			div1 = claim_element(header0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a = claim_element(div1_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "Maxim Siebert");
			a_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(header0_nodes);
			div5 = claim_element(header0_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p0 = claim_element(div2_nodes, "P", {});
			var p0_nodes = children(p0);
			t4 = claim_text(p0_nodes, "Project");
			p0_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			p1 = claim_element(div3_nodes, "P", {});
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "Role");
			p1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t7 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			p2 = claim_element(div4_nodes, "P", {});
			var p2_nodes = children(p2);
			t8 = claim_text(p2_nodes, "Year");
			p2_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			header0_nodes.forEach(detach_dev);
			t9 = claim_space(div18_nodes);
			section0 = claim_element(div18_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div6 = claim_element(section0_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div6_nodes.forEach(detach_dev);
			t10 = claim_space(section0_nodes);
			div7 = claim_element(section0_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div7_nodes);
			}

			div7_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t11 = claim_space(div18_nodes);
			header1 = claim_element(div18_nodes, "HEADER", { class: true });
			var header1_nodes = children(header1);
			div11 = claim_element(header1_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div8 = claim_element(div11_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			p3 = claim_element(div8_nodes, "P", {});
			var p3_nodes = children(p3);
			t12 = claim_text(p3_nodes, "Experience");
			p3_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t13 = claim_space(div11_nodes);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			p4 = claim_element(div9_nodes, "P", {});
			var p4_nodes = children(p4);
			t14 = claim_text(p4_nodes, "Title");
			p4_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			t15 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			p5 = claim_element(div10_nodes, "P", {});
			var p5_nodes = children(p5);
			t16 = claim_text(p5_nodes, "Year");
			p5_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			header1_nodes.forEach(detach_dev);
			t17 = claim_space(div18_nodes);
			section1 = claim_element(div18_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div12 = claim_element(section1_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div12_nodes);
			}

			div12_nodes.forEach(detach_dev);
			section1_nodes.forEach(detach_dev);
			t18 = claim_space(div18_nodes);
			div17 = claim_element(div18_nodes, "DIV", { class: true });
			var div17_nodes = children(div17);
			div13 = claim_element(div17_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			p6 = claim_element(div13_nodes, "P", {});
			var p6_nodes = children(p6);
			t19 = claim_text(p6_nodes, "Ottawa – ");
			t20 = claim_text(p6_nodes, /*time*/ ctx[2]);
			t21 = claim_text(p6_nodes, " ET");
			p6_nodes.forEach(detach_dev);
			div13_nodes.forEach(detach_dev);
			t22 = claim_space(div17_nodes);
			div16 = claim_element(div17_nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			div14 = claim_element(div16_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			p7 = claim_element(div14_nodes, "P", {});
			var p7_nodes = children(p7);
			t23 = claim_text(p7_nodes, "Updated 05/2021");
			p7_nodes.forEach(detach_dev);
			div14_nodes.forEach(detach_dev);
			t24 = claim_space(div16_nodes);
			div15 = claim_element(div16_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			p8 = claim_element(div15_nodes, "P", {});
			var p8_nodes = children(p8);
			t25 = claim_text(p8_nodes, "© 2011 – ");
			t26 = claim_text(p8_nodes, /*year*/ ctx[3]);
			p8_nodes.forEach(detach_dev);
			div15_nodes.forEach(detach_dev);
			div16_nodes.forEach(detach_dev);
			div17_nodes.forEach(detach_dev);
			div18_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(a, "href", "/");
			attr_dev(a, "class", "inline-block mb-2 hover:underline md:mb-0");
			add_location(a, file, 58, 3, 2031);
			attr_dev(div0, "class", "block text-gray-600 dark:text-gray-400 md:hidden");
			add_location(div0, file, 59, 3, 2114);
			attr_dev(div1, "class", "w-full px-4 mb-8 md:w-3/12 md:mb-0");
			add_location(div1, file, 57, 2, 1979);
			add_location(p0, file, 65, 4, 2299);
			attr_dev(div2, "class", "w-4/12 px-4");
			add_location(div2, file, 64, 3, 2269);
			add_location(p1, file, 68, 4, 2373);
			attr_dev(div3, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div3, file, 67, 3, 2327);
			add_location(p2, file, 71, 4, 2455);
			attr_dev(div4, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div4, file, 70, 3, 2398);
			attr_dev(div5, "class", "flex w-full ml-auto md:w-8/12");
			add_location(div5, file, 63, 2, 2222);
			attr_dev(header0, "class", "flex flex-wrap mb-2");
			add_location(header0, file, 56, 1, 1940);
			attr_dev(div6, "class", "hidden w-3/12 px-4 text-gray-600 dark:text-gray-400 md:block");
			add_location(div6, file, 76, 2, 2547);
			attr_dev(div7, "class", "w-full ml-auto md:w-8/12");
			add_location(div7, file, 79, 2, 2656);
			attr_dev(section0, "class", "flex flex-wrap mb-8 md:mb-12");
			add_location(section0, file, 75, 1, 2498);
			add_location(p3, file, 98, 4, 3317);
			attr_dev(div8, "class", "w-4/12 px-4");
			add_location(div8, file, 97, 3, 3287);
			add_location(p4, file, 101, 4, 3394);
			attr_dev(div9, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div9, file, 100, 3, 3348);
			add_location(p5, file, 104, 4, 3477);
			attr_dev(div10, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div10, file, 103, 3, 3420);
			attr_dev(div11, "class", "flex w-full ml-auto md:w-8/12");
			add_location(div11, file, 96, 2, 3240);
			attr_dev(header1, "class", "flex mb-2");
			add_location(header1, file, 95, 1, 3211);
			attr_dev(div12, "class", "w-full ml-auto md:w-8/12");
			add_location(div12, file, 109, 2, 3555);
			attr_dev(section1, "class", "flex flex-wrap");
			add_location(section1, file, 108, 1, 3520);
			add_location(p6, file, 127, 3, 4243);
			attr_dev(div13, "class", "w-8/12 px-4 sm:w-3/12");
			add_location(div13, file, 126, 2, 4204);
			add_location(p7, file, 131, 4, 4373);
			attr_dev(div14, "class", "hidden w-8/12 px-4 sm:block");
			add_location(div14, file, 130, 3, 4327);
			add_location(p8, file, 134, 4, 4466);
			attr_dev(div15, "class", "flex justify-end w-full px-4 sm:w-4/12");
			add_location(div15, file, 133, 3, 4409);
			attr_dev(div16, "class", "flex w-4/12 ml-auto sm:w-8/12");
			add_location(div16, file, 129, 2, 4280);
			attr_dev(div17, "class", "flex pt-8 mt-auto text-gray-600 md:pt-12 dark:text-gray-400");
			add_location(div17, file, 125, 1, 4128);
			attr_dev(div18, "class", "flex flex-col min-h-screen py-4 text-xs bg-gray-100 lg:py-12 lg:px-8 dark:bg-black dark:text-white");
			add_location(div18, file, 55, 0, 1826);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div18, anchor);
			append_dev(div18, header0);
			append_dev(header0, div1);
			append_dev(div1, a);
			append_dev(a, t1);
			append_dev(div1, t2);
			append_dev(div1, div0);
			div0.innerHTML = /*description*/ ctx[4];
			append_dev(header0, t3);
			append_dev(header0, div5);
			append_dev(div5, div2);
			append_dev(div2, p0);
			append_dev(p0, t4);
			append_dev(div5, t5);
			append_dev(div5, div3);
			append_dev(div3, p1);
			append_dev(p1, t6);
			append_dev(div5, t7);
			append_dev(div5, div4);
			append_dev(div4, p2);
			append_dev(p2, t8);
			append_dev(div18, t9);
			append_dev(div18, section0);
			append_dev(section0, div6);
			div6.innerHTML = /*description*/ ctx[4];
			append_dev(section0, t10);
			append_dev(section0, div7);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div7, null);
			}

			append_dev(div18, t11);
			append_dev(div18, header1);
			append_dev(header1, div11);
			append_dev(div11, div8);
			append_dev(div8, p3);
			append_dev(p3, t12);
			append_dev(div11, t13);
			append_dev(div11, div9);
			append_dev(div9, p4);
			append_dev(p4, t14);
			append_dev(div11, t15);
			append_dev(div11, div10);
			append_dev(div10, p5);
			append_dev(p5, t16);
			append_dev(div18, t17);
			append_dev(div18, section1);
			append_dev(section1, div12);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div12, null);
			}

			append_dev(div18, t18);
			append_dev(div18, div17);
			append_dev(div17, div13);
			append_dev(div13, p6);
			append_dev(p6, t19);
			append_dev(p6, t20);
			append_dev(p6, t21);
			append_dev(div17, t22);
			append_dev(div17, div16);
			append_dev(div16, div14);
			append_dev(div14, p7);
			append_dev(p7, t23);
			append_dev(div16, t24);
			append_dev(div16, div15);
			append_dev(div15, p8);
			append_dev(p8, t25);
			append_dev(p8, t26);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*projects*/ 1) {
				each_value_1 = /*projects*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div7, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*experiences*/ 2) {
				each_value = /*experiences*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div12, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*time*/ 4) set_data_dev(t20, /*time*/ ctx[2]);
			if (dirty & /*year*/ 8) set_data_dev(t26, /*year*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div18);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	const getProjects = await this.fetch(`content/projects.json`);
	const projects = await getProjects.json();
	const getExperiences = await this.fetch(`content/experiences.json`);
	const experiences = await getExperiences.json();
	return { projects, experiences };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let { projects } = $$props;
	let { experiences } = $$props;
	var time = "";
	var year = "";
	let description = "is a French Canadian Designer & Developer. He's currently a Principal Designer at <a href=\"https://blunt.af/\" class=\"hover:text-black dark:hover:text-white hover:underline\" target=\"_blank\" rel=\"noreferrer noopener\">Peggy</a> and freelances through his studio <a href=\"https://blunt.af/\" class=\"hover:text-black dark:hover:text-white hover:underline\" target=\"_blank\" rel=\"noreferrer noopener\">Blunt</a>. This site lists most of the work he's done over the years, if you'd like to discuss new commissions or collaborate with Maxim email him at <a href=\"mailto:maxim@hey.com\" class=\"hover:text-black dark:hover:text-white hover:underline\">maxim@hey.com</a>.";

	function updateClock() {
		var now = new Date(),
			hour = now.getHours(),
			minutes = now.getMinutes(),
			sep = ":",
			ampm = "am"; // current date

		if (hour >= 12) {
			hour -= 12;
			ampm = "pm";
		}

		minutes = minutes < 10 ? "0" + minutes : minutes;
		hour = hour % 12;
		hour = hour ? hour : 12; // the hour '0' should be '12'

		// set the content of the element with the ID time to the formatted string
		$$invalidate(2, time = hour + sep + minutes + " " + ampm);

		$$invalidate(3, year = now.getFullYear());

		// call this function again in 1000ms
		setTimeout(updateClock, 1000);
	}

	updateClock();
	const writable_props = ["projects", "experiences"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
		if ("experiences" in $$props) $$invalidate(1, experiences = $$props.experiences);
	};

	$$self.$capture_state = () => ({
		preload,
		projects,
		experiences,
		time,
		year,
		description,
		updateClock
	});

	$$self.$inject_state = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
		if ("experiences" in $$props) $$invalidate(1, experiences = $$props.experiences);
		if ("time" in $$props) $$invalidate(2, time = $$props.time);
		if ("year" in $$props) $$invalidate(3, year = $$props.year);
		if ("description" in $$props) $$invalidate(4, description = $$props.description);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [projects, experiences, time, year, description];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { projects: 0, experiences: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*projects*/ ctx[0] === undefined && !("projects" in props)) {
			console.warn("<Routes> was created without expected prop 'projects'");
		}

		if (/*experiences*/ ctx[1] === undefined && !("experiences" in props)) {
			console.warn("<Routes> was created without expected prop 'experiences'");
		}
	}

	get projects() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projects(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get experiences() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set experiences(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
