import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, j as add_location, k as attr_dev, l as insert_dev, m as append_dev, n as set_data_dev, p as noop, q as validate_each_argument, r as create_component, u as query_selector_all, w as claim_component, x as mount_component, y as transition_in, z as transition_out, A as destroy_each, B as destroy_component } from './client.60888f34.js';

/* src/components/Footer.svelte generated by Svelte v3.38.2 */
const file$1 = "src/components/Footer.svelte";

function create_fragment$1(ctx) {
	let div4;
	let div0;
	let p0;
	let t0;
	let t1;
	let t2;
	let t3;
	let div3;
	let div1;
	let p1;
	let t4;
	let t5_value = /*updatedDate*/ ctx[0].getHours() + "";
	let t5;
	let t6;
	let div2;
	let p2;
	let t7;
	let t8;
	let t9;

	const block = {
		c: function create() {
			div4 = element("div");
			div0 = element("div");
			p0 = element("p");
			t0 = text("Ottawa – ");
			t1 = text(/*time*/ ctx[1]);
			t2 = text(" ET");
			t3 = space();
			div3 = element("div");
			div1 = element("div");
			p1 = element("p");
			t4 = text("Updated ");
			t5 = text(t5_value);
			t6 = space();
			div2 = element("div");
			p2 = element("p");
			t7 = text("2011 – ");
			t8 = text(/*year*/ ctx[2]);
			t9 = text(" ©");
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div0 = claim_element(div4_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Ottawa – ");
			t1 = claim_text(p0_nodes, /*time*/ ctx[1]);
			t2 = claim_text(p0_nodes, " ET");
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Updated ");
			t5 = claim_text(p1_nodes, t5_value);
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", {});
			var p2_nodes = children(p2);
			t7 = claim_text(p2_nodes, "2011 – ");
			t8 = claim_text(p2_nodes, /*year*/ ctx[2]);
			t9 = claim_text(p2_nodes, " ©");
			p2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file$1, 49, 8, 1190);
			attr_dev(div0, "class", "w-8/12 px-4 sm:w-3/12");
			add_location(div0, file$1, 48, 4, 1146);
			add_location(p1, file$1, 53, 12, 1337);
			attr_dev(div1, "class", "hidden w-8/12 px-4 sm:block");
			add_location(div1, file$1, 52, 8, 1283);
			add_location(p2, file$1, 56, 12, 1465);
			attr_dev(div2, "class", "flex justify-end w-full px-4 sm:w-4/12");
			add_location(div2, file$1, 55, 8, 1400);
			attr_dev(div3, "class", "flex w-4/12 ml-auto sm:w-8/12");
			add_location(div3, file$1, 51, 4, 1231);
			attr_dev(div4, "class", "flex pt-5 mt-auto text-gray-600 sm:pt-8 md:pt-12 dark:text-gray-400");
			add_location(div4, file$1, 47, 0, 1060);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(p0, t1);
			append_dev(p0, t2);
			append_dev(div4, t3);
			append_dev(div4, div3);
			append_dev(div3, div1);
			append_dev(div1, p1);
			append_dev(p1, t4);
			append_dev(p1, t5);
			append_dev(div3, t6);
			append_dev(div3, div2);
			append_dev(div2, p2);
			append_dev(p2, t7);
			append_dev(p2, t8);
			append_dev(p2, t9);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*time*/ 2) set_data_dev(t1, /*time*/ ctx[1]);
			if (dirty & /*updatedDate*/ 1 && t5_value !== (t5_value = /*updatedDate*/ ctx[0].getHours() + "")) set_data_dev(t5, t5_value);
			if (dirty & /*year*/ 4) set_data_dev(t8, /*year*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Footer", slots, []);
	let updatedDate;

	onMount(async () => {
		fetch(`https://api.github.com/repos/MaximSiebert/MaximSiebert-2021/branches/gh-pages`, {
			headers: {
				"Accept": "application/vnd.github.v3+json"
			}
		}).then(r => r.json()).then(data => {
			$$invalidate(0, updatedDate = data.commit.commit.author.date);
		});
	});

	var time = "";
	var year = "";

	function updateClock() {
		var now = new Date(),
			hour = now.getHours(),
			minutes = now.getMinutes(),
			sep = ":",
			ampm = "am"; // current date

		if (hour >= 12) {
			hour -= 12;
			ampm = "pm";
		}

		minutes = minutes < 10 ? "0" + minutes : minutes;
		hour = hour % 12;
		hour = hour ? hour : 12; // the hour '0' should be '12'

		// set the content of the element with the ID time to the formatted string
		$$invalidate(1, time = hour + sep + minutes + " " + ampm);

		$$invalidate(2, year = now.getFullYear());

		// call this function again in 1000ms
		setTimeout(updateClock, 1000);
	}

	updateClock();
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		updatedDate,
		time,
		year,
		updateClock
	});

	$$self.$inject_state = $$props => {
		if ("updatedDate" in $$props) $$invalidate(0, updatedDate = $$props.updatedDate);
		if ("time" in $$props) $$invalidate(1, time = $$props.time);
		if ("year" in $$props) $$invalidate(2, year = $$props.year);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [updatedDate, time, year];
}

class Footer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Footer",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.38.2 */
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (64:3) {#each projects as project}
function create_each_block_4(ctx) {
	let a;
	let div0;
	let p0;
	let t0_value = /*project*/ ctx[18].title + "";
	let t0;
	let t1;
	let div1;
	let p1;
	let t2_value = /*project*/ ctx[18].role + "";
	let t2;
	let t3;
	let div2;
	let p2;
	let t4_value = /*project*/ ctx[18].year + "";
	let t4;
	let t5;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			div0 = element("div");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			p2 = element("p");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(a_nodes);
			div2 = claim_element(a_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", {});
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, t4_value);
			p2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 66, 6, 2903);
			attr_dev(div0, "class", "w-8/12 px-4 sm:w-4/12");
			add_location(div0, file, 65, 5, 2861);
			add_location(p1, file, 69, 6, 2991);
			attr_dev(div1, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div1, file, 68, 5, 2943);
			add_location(p2, file, 72, 6, 3079);
			attr_dev(div2, "class", "flex justify-end w-4/12 px-4");
			add_location(div2, file, 71, 5, 3030);
			attr_dev(a, "class", "flex block ml-auto text-gray-600 dark:text-gray-400 hover:underline hover:text-black dark:hover:text-white");
			attr_dev(a, "href", a_href_value = /*project*/ ctx[18].url);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file, 64, 4, 2674);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(a, t1);
			append_dev(a, div1);
			append_dev(div1, p1);
			append_dev(p1, t2);
			append_dev(a, t3);
			append_dev(a, div2);
			append_dev(div2, p2);
			append_dev(p2, t4);
			append_dev(a, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projects*/ 1 && t0_value !== (t0_value = /*project*/ ctx[18].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*projects*/ 1 && t2_value !== (t2_value = /*project*/ ctx[18].role + "")) set_data_dev(t2, t2_value);
			if (dirty & /*projects*/ 1 && t4_value !== (t4_value = /*project*/ ctx[18].year + "")) set_data_dev(t4, t4_value);

			if (dirty & /*projects*/ 1 && a_href_value !== (a_href_value = /*project*/ ctx[18].url)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(64:3) {#each projects as project}",
		ctx
	});

	return block;
}

// (94:3) {#each experiences as experience}
function create_each_block_3(ctx) {
	let a;
	let div0;
	let p0;
	let t0_value = /*experience*/ ctx[15].title + "";
	let t0;
	let t1;
	let div1;
	let p1;
	let t2_value = /*experience*/ ctx[15].role + "";
	let t2;
	let t3;
	let div2;
	let p2;
	let t4_value = /*experience*/ ctx[15].date + "";
	let t4;
	let t5;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			div0 = element("div");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			p2 = element("p");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(a_nodes);
			div2 = claim_element(a_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", {});
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, t4_value);
			p2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 96, 6, 3831);
			attr_dev(div0, "class", "w-4/12 px-4");
			add_location(div0, file, 95, 5, 3799);
			add_location(p1, file, 99, 6, 3922);
			attr_dev(div1, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div1, file, 98, 5, 3874);
			add_location(p2, file, 102, 6, 4023);
			attr_dev(div2, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div2, file, 101, 5, 3964);
			attr_dev(a, "class", "flex block ml-auto text-gray-600 dark:text-gray-400 hover:underline hover:text-black dark:hover:text-white");
			attr_dev(a, "href", a_href_value = /*experience*/ ctx[15].url);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file, 94, 4, 3609);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(a, t1);
			append_dev(a, div1);
			append_dev(div1, p1);
			append_dev(p1, t2);
			append_dev(a, t3);
			append_dev(a, div2);
			append_dev(div2, p2);
			append_dev(p2, t4);
			append_dev(a, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*experiences*/ 2 && t0_value !== (t0_value = /*experience*/ ctx[15].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*experiences*/ 2 && t2_value !== (t2_value = /*experience*/ ctx[15].role + "")) set_data_dev(t2, t2_value);
			if (dirty & /*experiences*/ 2 && t4_value !== (t4_value = /*experience*/ ctx[15].date + "")) set_data_dev(t4, t4_value);

			if (dirty & /*experiences*/ 2 && a_href_value !== (a_href_value = /*experience*/ ctx[15].url)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(94:3) {#each experiences as experience}",
		ctx
	});

	return block;
}

// (112:3) {#each services as service}
function create_each_block_2(ctx) {
	let p;
	let t_value = /*service*/ ctx[12].title + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "text-gray-600 dark:text-gray-400");
			add_location(p, file, 112, 4, 4273);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*services*/ 8 && t_value !== (t_value = /*service*/ ctx[12].title + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(112:3) {#each services as service}",
		ctx
	});

	return block;
}

// (118:3) {#each collaborators as collaborator}
function create_each_block_1(ctx) {
	let p;
	let t_value = /*collaborator*/ ctx[9].title + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "text-gray-600 dark:text-gray-400");
			add_location(p, file, 118, 4, 4494);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*collaborators*/ 4 && t_value !== (t_value = /*collaborator*/ ctx[9].title + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(118:3) {#each collaborators as collaborator}",
		ctx
	});

	return block;
}

// (124:3) {#each links as link}
function create_each_block(ctx) {
	let p;
	let a;
	let t_value = /*link*/ ctx[6].title + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);

			a = claim_element(p_nodes, "A", {
				href: true,
				class: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = /*link*/ ctx[6].url);
			attr_dev(a, "class", "text-gray-600 dark:text-gray-400 hover:underline hover:text-black dark:hover:text-white");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file, 124, 7, 4691);
			add_location(p, file, 124, 4, 4688);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*links*/ 16 && t_value !== (t_value = /*link*/ ctx[6].title + "")) set_data_dev(t, t_value);

			if (dirty & /*links*/ 16 && a_href_value !== (a_href_value = /*link*/ ctx[6].url)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(124:3) {#each links as link}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div16;
	let a;
	let t1;
	let header0;
	let div1;
	let h1;
	let t2;
	let t3;
	let div0;
	let t4;
	let div5;
	let div2;
	let p0;
	let t5;
	let t6;
	let div3;
	let p1;
	let t7;
	let t8;
	let div4;
	let p2;
	let t9;
	let t10;
	let section0;
	let div6;
	let t11;
	let div7;
	let t12;
	let header1;
	let div11;
	let div8;
	let p3;
	let t13;
	let t14;
	let div9;
	let p4;
	let t15;
	let t16;
	let div10;
	let p5;
	let t17;
	let t18;
	let section1;
	let div12;
	let t19;
	let section2;
	let div13;
	let p6;
	let t20;
	let t21;
	let t22;
	let div14;
	let p7;
	let t23;
	let t24;
	let t25;
	let div15;
	let p8;
	let t26;
	let t27;
	let t28;
	let footer;
	let current;
	let each_value_4 = /*projects*/ ctx[0];
	validate_each_argument(each_value_4);
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_3 = /*experiences*/ ctx[1];
	validate_each_argument(each_value_3);
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let each_value_2 = /*services*/ ctx[3];
	validate_each_argument(each_value_2);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*collaborators*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*links*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			div16 = element("div");
			a = element("a");
			t1 = space();
			header0 = element("header");
			div1 = element("div");
			h1 = element("h1");
			t2 = text("Maxim Siebert");
			t3 = space();
			div0 = element("div");
			t4 = space();
			div5 = element("div");
			div2 = element("div");
			p0 = element("p");
			t5 = text("Project");
			t6 = space();
			div3 = element("div");
			p1 = element("p");
			t7 = text("Role");
			t8 = space();
			div4 = element("div");
			p2 = element("p");
			t9 = text("Year");
			t10 = space();
			section0 = element("section");
			div6 = element("div");
			t11 = space();
			div7 = element("div");

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t12 = space();
			header1 = element("header");
			div11 = element("div");
			div8 = element("div");
			p3 = element("p");
			t13 = text("Experience");
			t14 = space();
			div9 = element("div");
			p4 = element("p");
			t15 = text("Title");
			t16 = space();
			div10 = element("div");
			p5 = element("p");
			t17 = text("Year");
			t18 = space();
			section1 = element("section");
			div12 = element("div");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t19 = space();
			section2 = element("section");
			div13 = element("div");
			p6 = element("p");
			t20 = text("Services");
			t21 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t22 = space();
			div14 = element("div");
			p7 = element("p");
			t23 = text("Selected Clients");
			t24 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t25 = space();
			div15 = element("div");
			p8 = element("p");
			t26 = text("Links");
			t27 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t28 = space();
			create_component(footer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1e6j3ni\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div16 = claim_element(nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			a = claim_element(div16_nodes, "A", { href: true, class: true });
			children(a).forEach(detach_dev);
			t1 = claim_space(div16_nodes);
			header0 = claim_element(div16_nodes, "HEADER", { class: true });
			var header0_nodes = children(header0);
			div1 = claim_element(header0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Maxim Siebert");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(header0_nodes);
			div5 = claim_element(header0_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p0 = claim_element(div2_nodes, "P", {});
			var p0_nodes = children(p0);
			t5 = claim_text(p0_nodes, "Project");
			p0_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t6 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			p1 = claim_element(div3_nodes, "P", {});
			var p1_nodes = children(p1);
			t7 = claim_text(p1_nodes, "Role");
			p1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t8 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			p2 = claim_element(div4_nodes, "P", {});
			var p2_nodes = children(p2);
			t9 = claim_text(p2_nodes, "Year");
			p2_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			header0_nodes.forEach(detach_dev);
			t10 = claim_space(div16_nodes);
			section0 = claim_element(div16_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div6 = claim_element(section0_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div6_nodes.forEach(detach_dev);
			t11 = claim_space(section0_nodes);
			div7 = claim_element(section0_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].l(div7_nodes);
			}

			div7_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t12 = claim_space(div16_nodes);
			header1 = claim_element(div16_nodes, "HEADER", { class: true });
			var header1_nodes = children(header1);
			div11 = claim_element(header1_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div8 = claim_element(div11_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			p3 = claim_element(div8_nodes, "P", {});
			var p3_nodes = children(p3);
			t13 = claim_text(p3_nodes, "Experience");
			p3_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t14 = claim_space(div11_nodes);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			p4 = claim_element(div9_nodes, "P", {});
			var p4_nodes = children(p4);
			t15 = claim_text(p4_nodes, "Title");
			p4_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			t16 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			p5 = claim_element(div10_nodes, "P", {});
			var p5_nodes = children(p5);
			t17 = claim_text(p5_nodes, "Year");
			p5_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			header1_nodes.forEach(detach_dev);
			t18 = claim_space(div16_nodes);
			section1 = claim_element(div16_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div12 = claim_element(section1_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].l(div12_nodes);
			}

			div12_nodes.forEach(detach_dev);
			section1_nodes.forEach(detach_dev);
			t19 = claim_space(div16_nodes);
			section2 = claim_element(div16_nodes, "SECTION", { class: true });
			var section2_nodes = children(section2);
			div13 = claim_element(section2_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			p6 = claim_element(div13_nodes, "P", { class: true });
			var p6_nodes = children(p6);
			t20 = claim_text(p6_nodes, "Services");
			p6_nodes.forEach(detach_dev);
			t21 = claim_space(div13_nodes);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(div13_nodes);
			}

			div13_nodes.forEach(detach_dev);
			t22 = claim_space(section2_nodes);
			div14 = claim_element(section2_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			p7 = claim_element(div14_nodes, "P", { class: true });
			var p7_nodes = children(p7);
			t23 = claim_text(p7_nodes, "Selected Clients");
			p7_nodes.forEach(detach_dev);
			t24 = claim_space(div14_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div14_nodes);
			}

			div14_nodes.forEach(detach_dev);
			t25 = claim_space(section2_nodes);
			div15 = claim_element(section2_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			p8 = claim_element(div15_nodes, "P", { class: true });
			var p8_nodes = children(p8);
			t26 = claim_text(p8_nodes, "Links");
			p8_nodes.forEach(detach_dev);
			t27 = claim_space(div15_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div15_nodes);
			}

			div15_nodes.forEach(detach_dev);
			section2_nodes.forEach(detach_dev);
			t28 = claim_space(div16_nodes);
			claim_component(footer.$$.fragment, div16_nodes);
			div16_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Maxim Siebert – Designer & Developer";
			attr_dev(a, "href", "/");
			attr_dev(a, "class", "self-start inline-block px-4 mb-5 loader");
			add_location(a, file, 38, 1, 1788);
			attr_dev(h1, "class", "inline-block mb-1 sm:mb-2 md:mb-0");
			add_location(h1, file, 41, 3, 1972);
			attr_dev(div0, "class", "block text-gray-600 dark:text-gray-400 md:hidden");
			add_location(div0, file, 42, 3, 2040);
			attr_dev(div1, "class", "w-full px-4 mb-5 sm:mb-8 lg:w-3/12 md:w-4/12 md:mb-0");
			add_location(div1, file, 40, 2, 1902);
			add_location(p0, file, 48, 4, 2225);
			attr_dev(div2, "class", "w-4/12 px-4");
			add_location(div2, file, 47, 3, 2195);
			add_location(p1, file, 51, 4, 2299);
			attr_dev(div3, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div3, file, 50, 3, 2253);
			add_location(p2, file, 54, 4, 2381);
			attr_dev(div4, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div4, file, 53, 3, 2324);
			attr_dev(div5, "class", "flex w-full ml-auto md:w-8/12");
			add_location(div5, file, 46, 2, 2148);
			attr_dev(header0, "class", "flex flex-wrap mb-1 sm:mb-2");
			add_location(header0, file, 39, 1, 1855);
			attr_dev(div6, "class", "hidden w-4/12 px-4 text-gray-600 lg:w-3/12 dark:text-gray-400 md:block");
			add_location(div6, file, 59, 2, 2481);
			attr_dev(div7, "class", "w-full ml-auto md:w-8/12");
			add_location(div7, file, 62, 2, 2600);
			attr_dev(section0, "class", "flex flex-wrap mb-5 sm:mb-8 md:mb-12");
			add_location(section0, file, 58, 1, 2424);
			add_location(p3, file, 81, 4, 3269);
			attr_dev(div8, "class", "w-4/12 px-4");
			add_location(div8, file, 80, 3, 3239);
			add_location(p4, file, 84, 4, 3346);
			attr_dev(div9, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div9, file, 83, 3, 3300);
			add_location(p5, file, 87, 4, 3429);
			attr_dev(div10, "class", "flex justify-end w-8/12 px-4 sm:w-4/12");
			add_location(div10, file, 86, 3, 3372);
			attr_dev(div11, "class", "flex w-full ml-auto md:w-8/12");
			add_location(div11, file, 79, 2, 3192);
			attr_dev(header1, "class", "flex mb-1 sm:mb-2");
			add_location(header1, file, 78, 1, 3155);
			attr_dev(div12, "class", "w-full ml-auto md:w-8/12");
			add_location(div12, file, 92, 2, 3529);
			attr_dev(section1, "class", "flex flex-wrap mb-5 sm:mb-8 md:mb-12");
			add_location(section1, file, 91, 1, 3472);
			attr_dev(p6, "class", "mb-1 sm:mb-2");
			add_location(p6, file, 110, 3, 4201);
			attr_dev(div13, "class", "w-8/12 px-4 sm:w-4/12");
			add_location(div13, file, 109, 2, 4162);
			attr_dev(p7, "class", "mb-1 sm:mb-2");
			add_location(p7, file, 116, 3, 4404);
			attr_dev(div14, "class", "hidden w-4/12 px-4 sm:block");
			add_location(div14, file, 115, 2, 4359);
			attr_dev(p8, "class", "mb-1 sm:mb-2");
			add_location(p8, file, 122, 3, 4625);
			attr_dev(div15, "class", "w-4/12 px-4 text-right");
			add_location(div15, file, 121, 2, 4585);
			attr_dev(section2, "class", "flex flex-wrap w-full ml-auto md:w-8/12");
			add_location(section2, file, 108, 1, 4102);
			attr_dev(div16, "class", "flex flex-col min-h-screen py-5 text-xs bg-gray-100 lg:px-4 dark:bg-black dark:text-white");
			add_location(div16, file, 37, 0, 1683);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div16, anchor);
			append_dev(div16, a);
			append_dev(div16, t1);
			append_dev(div16, header0);
			append_dev(header0, div1);
			append_dev(div1, h1);
			append_dev(h1, t2);
			append_dev(div1, t3);
			append_dev(div1, div0);
			div0.innerHTML = /*description*/ ctx[5];
			append_dev(header0, t4);
			append_dev(header0, div5);
			append_dev(div5, div2);
			append_dev(div2, p0);
			append_dev(p0, t5);
			append_dev(div5, t6);
			append_dev(div5, div3);
			append_dev(div3, p1);
			append_dev(p1, t7);
			append_dev(div5, t8);
			append_dev(div5, div4);
			append_dev(div4, p2);
			append_dev(p2, t9);
			append_dev(div16, t10);
			append_dev(div16, section0);
			append_dev(section0, div6);
			div6.innerHTML = /*description*/ ctx[5];
			append_dev(section0, t11);
			append_dev(section0, div7);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(div7, null);
			}

			append_dev(div16, t12);
			append_dev(div16, header1);
			append_dev(header1, div11);
			append_dev(div11, div8);
			append_dev(div8, p3);
			append_dev(p3, t13);
			append_dev(div11, t14);
			append_dev(div11, div9);
			append_dev(div9, p4);
			append_dev(p4, t15);
			append_dev(div11, t16);
			append_dev(div11, div10);
			append_dev(div10, p5);
			append_dev(p5, t17);
			append_dev(div16, t18);
			append_dev(div16, section1);
			append_dev(section1, div12);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div12, null);
			}

			append_dev(div16, t19);
			append_dev(div16, section2);
			append_dev(section2, div13);
			append_dev(div13, p6);
			append_dev(p6, t20);
			append_dev(div13, t21);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div13, null);
			}

			append_dev(section2, t22);
			append_dev(section2, div14);
			append_dev(div14, p7);
			append_dev(p7, t23);
			append_dev(div14, t24);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div14, null);
			}

			append_dev(section2, t25);
			append_dev(section2, div15);
			append_dev(div15, p8);
			append_dev(p8, t26);
			append_dev(div15, t27);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div15, null);
			}

			append_dev(div16, t28);
			mount_component(footer, div16, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*projects*/ 1) {
				each_value_4 = /*projects*/ ctx[0];
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(div7, null);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty & /*experiences*/ 2) {
				each_value_3 = /*experiences*/ ctx[1];
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(div12, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*services*/ 8) {
				each_value_2 = /*services*/ ctx[3];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div13, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*collaborators*/ 4) {
				each_value_1 = /*collaborators*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div14, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*links*/ 16) {
				each_value = /*links*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div15, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div16);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			destroy_component(footer);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const getProjects = await this.fetch(`content/projects.json`);
	const projects = await getProjects.json();
	const getExperiences = await this.fetch(`content/experiences.json`);
	const experiences = await getExperiences.json();
	const getCollaborators = await this.fetch(`content/collaborators.json`);
	const collaborators = await getCollaborators.json();
	const getServices = await this.fetch(`content/services.json`);
	const services = await getServices.json();
	const getLinks = await this.fetch(`content/links.json`);
	const links = await getLinks.json();

	return {
		projects,
		experiences,
		collaborators,
		services,
		links
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let { projects } = $$props;
	let { experiences } = $$props;
	let { collaborators } = $$props;
	let { services } = $$props;
	let { links } = $$props;
	let description = "is a French Canadian designer & developer. He's currently a Principal Designer at <a href=\"https://blunt.af/\" class=\"hover:text-black dark:hover:text-white hover:underline\" target=\"_blank\" rel=\"noreferrer noopener\">Peggy</a> and freelances through his studio <a href=\"https://blunt.af/\" class=\"hover:text-black dark:hover:text-white hover:underline\" target=\"_blank\" rel=\"noreferrer noopener\">Blunt</a>. This site lists most of the work he's done over the years, if you'd like to discuss new commissions or collaborate with Maxim email him at <a href=\"mailto:maxim@hey.com\" class=\"hover:text-black dark:hover:text-white hover:underline\">maxim@hey.com</a>.";
	const writable_props = ["projects", "experiences", "collaborators", "services", "links"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
		if ("experiences" in $$props) $$invalidate(1, experiences = $$props.experiences);
		if ("collaborators" in $$props) $$invalidate(2, collaborators = $$props.collaborators);
		if ("services" in $$props) $$invalidate(3, services = $$props.services);
		if ("links" in $$props) $$invalidate(4, links = $$props.links);
	};

	$$self.$capture_state = () => ({
		preload,
		Footer,
		projects,
		experiences,
		collaborators,
		services,
		links,
		description
	});

	$$self.$inject_state = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
		if ("experiences" in $$props) $$invalidate(1, experiences = $$props.experiences);
		if ("collaborators" in $$props) $$invalidate(2, collaborators = $$props.collaborators);
		if ("services" in $$props) $$invalidate(3, services = $$props.services);
		if ("links" in $$props) $$invalidate(4, links = $$props.links);
		if ("description" in $$props) $$invalidate(5, description = $$props.description);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [projects, experiences, collaborators, services, links, description];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			projects: 0,
			experiences: 1,
			collaborators: 2,
			services: 3,
			links: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*projects*/ ctx[0] === undefined && !("projects" in props)) {
			console.warn("<Routes> was created without expected prop 'projects'");
		}

		if (/*experiences*/ ctx[1] === undefined && !("experiences" in props)) {
			console.warn("<Routes> was created without expected prop 'experiences'");
		}

		if (/*collaborators*/ ctx[2] === undefined && !("collaborators" in props)) {
			console.warn("<Routes> was created without expected prop 'collaborators'");
		}

		if (/*services*/ ctx[3] === undefined && !("services" in props)) {
			console.warn("<Routes> was created without expected prop 'services'");
		}

		if (/*links*/ ctx[4] === undefined && !("links" in props)) {
			console.warn("<Routes> was created without expected prop 'links'");
		}
	}

	get projects() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projects(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get experiences() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set experiences(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get collaborators() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set collaborators(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get services() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set services(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get links() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set links(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
